class Solution {
    class Pair{
        int first;
        int second;
        
        Pair(int first,int second){
            this.first=first;
            this.second=second;
        }
    }

    int numberOfEnclaves(int[][] grid) {

        // Your code here
        int n=grid.length;
        int m=grid[0].length;
        
        boolean visited[][]=new boolean[n][m];
        Queue<Pair> q= new LinkedList<Pair>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if ((i == 0 || i == n - 1 || j == 0 || j == m - 1) && grid[i][j] == 1){
                    q.add(new Pair(i,j));
                    visited[i][j]=true;
                }
            }
        }
        
        while(!q.isEmpty()){
            int row=q.peek().first;
            int col=q.peek().second;
            q.remove();
            
            int rowDir[]={-1,1,0,0};
            int colDir[]={0,0,-1,1};
            
            for(int d=0;d<4;d++){
                int nr=row+rowDir[d];
                int nc=col+colDir[d];
                
                if(nr>=0 && nr< grid.length && nc>=0 && nc<grid[0].length && !visited[nr][nc] && grid[nr][nc]==1){
                    q.add(new Pair(nr,nc));
                    visited[nr][nc]=true;
                }
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    count++;
                }
            }
        }
        return count;
    }
    
    
}