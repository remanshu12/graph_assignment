 private void dfs(int row, int col, int[][] vis, int[][] grid,
                     int baseRow, int baseCol, List<List<Integer>> shape) {
        vis[row][col] = 1;
        shape.add(Arrays.asList(row - baseRow, col - baseCol));

        int n = grid.length;
        int m = grid[0].length;

        // Directions: up, right, down, left
        int[] dr = {-1, 0, 1, 0};
        int[] dc = {0, 1, 0, -1};

        for (int i = 0; i < 4; i++) {
            int nrow = row + dr[i];
            int ncol = col + dc[i];

            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m
                    && grid[nrow][ncol] == 1 && vis[nrow][ncol] == 0) {
                dfs(nrow, ncol, vis, grid, baseRow, baseCol, shape);
            }
        }
    }

    int countDistinctIslands(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] vis = new int[n][m];

        Set<List<List<Integer>>> distinctShapes = new HashSet<>();

        for (int row = 0; row < n; row++) {
            for (int col = 0; col < m; col++) {
                if (vis[row][col] == 0 && grid[row][col] == 1) {
                    List<List<Integer>> shape = new ArrayList<>();
                    dfs(row, col, vis, grid, row, col, shape);
                    distinctShapes.add(shape); // stores list of coordinate pairs
                }
            }
        }
        return distinctShapes.size();
    }
}