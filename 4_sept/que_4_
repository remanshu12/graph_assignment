class Solution {
    
    static int[] r={1,-1,0,0};
    static int[] c={0,0,1,-1};
    private static class Pair{
        int row;
        int col;
        public Pair(int row,int col){
            this.row=row;
            this.col=col;
        } 
    }
    
    static boolean isValid(int curRow,int row,int curCol,int col){
        return curRow>=0&&curRow<row&&curCol>=0&&curCol<col;
    }
    static char[][] fill(char mat[][]) {
        
        Queue<Pair> q=new LinkedList<>();
        
        int m=mat.length;
        int n=mat[0].length;
        
        boolean[][] visited=new boolean[m][n];
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if((i==0 || i==m-1 || j==0 || j==n-1) && mat[i][j]=='O'){
                    q.add(new Pair(i,j));
                    visited[i][j]=true;
                }
            }
        }
        
        while(!q.isEmpty()){
            int row=q.peek().row;
            int col=q.peek().col;
            
            q.poll();
            for(int i=0;i<4;i++){
                int tempRow=row+r[i];
                int tempCol=col+c[i];
                
                if(isValid(tempRow,m,tempCol,n) && !visited[tempRow][tempCol]
                   && mat[tempRow][tempCol]=='O'){
                       q.add(new Pair(tempRow,tempCol));
                       visited[tempRow][tempCol]=true;
                   }
            }
        }
        
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!visited[i][j] && mat[i][j]=='O'){
                    mat[i][j]='X';
                }
            }
        }
        
        return mat;
    }
}